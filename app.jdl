application {
  config {
    applicationType gateway
    authenticationType jwt
    baseName store
    buildTool maven
    cacheProvider hazelcast
    clientFramework angularX
    clientPackageManager npm
    clientTheme solar
    clientThemeVariant dark
    creationTimestamp 1586704680527
    databaseType sql
    devDatabaseType h2Disk
    dtoSuffix DTO
    embeddableLaunchScript false
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    jhipsterVersion "6.8.0"
    jwtSecretKey "ZGNjM2YyMzAzYTZmMzlmZWUzOTVhY2Y0NDAwZjlhZjZhODVhZjFlZTM3Y2Y3YTFlM2EzYzJiNDM5MTRkY2U2ZmQxODhkMTc2YjUzOTE4Njc3N2M3NzZiY2QzNTNhNDY2MjAwMzI3M2ZkZjY3MDQzNDZhNzNiZjI4MTNmNjY5MzI="
    languages [en, zh-cn]
    messageBroker false
    nativeLanguage en
    otherModules []
    packageName com.mycompany.store
    prodDatabaseType postgresql
    searchEngine false
    serverPort 8080
    serviceDiscoveryType eureka
    skipClient false
    skipServer false
    skipUserManagement false
    testFrameworks [protractor]
    useSass true
    websocket spring-websocket
  }

  entities *
}
application {
  config {
    baseName invoice,
    applicationType microservice,
    packageName com.mycompany.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    prodDatabaseType postgresql,
    buildTool maven,
    serverPort 8081,
    languages [en, zh-cn]
  }
  entities Invoice, Shipment
}
application {
  config {
    baseName notification,
    applicationType microservice,
    packageName com.mycompany.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType mongodb,
    cacheProvider no,
    enableHibernateCache false,
    buildTool maven,
    serverPort 8082,
    languages [en, zh-cn]
  }
  entities Notification
}

entity Customer {
  firstName String required,
  lastName String required,
  gender Gender required,
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
  phone String required,
  addressLine1 String required,
  addressLine2 String,
  city String required,
  country String required
}

entity OrderItem {
  quantity Integer required min(0),
  totalPrice BigDecimal required min(0),
  status OrderItemStatus required
}
/**
 * Product sold by the Online store
 */
entity Product {
  name String required,
  description String,
  price BigDecimal required min(0),
  size Size required,
  image ImageBlob
}
entity ProductCategory {
  name String required,
  description String
}
entity ProductOrder {
  placedDate Instant required,
  status OrderStatus required,
  code String required
}

/* Entities for Invoice microservice */

entity Invoice {
    code String required
    date Instant required
    details String
    status InvoiceStatus required
    paymentMethod PaymentMethod required
    paymentDate Instant required
    paymentAmount BigDecimal required
    productOrderId Long required
}

enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}

enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}

entity Shipment {
    trackingCode String
    date Instant required
    details String
}

relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}

microservice Invoice, Shipment with invoice


enum Gender {
  MALE,
  FEMALE,
  OTHER
}


enum OrderItemStatus {
  AVAILABLE,
  OUT_OF_STOCK,
  BACK_ORDER
}
enum Size {
  S,
  M,
  L,
  XL,
  XXL
}
enum OrderStatus {
  COMPLETED,
  PENDING,
  CANCELLED
}

relationship OneToOne {
  Customer{user(login) required} to User
}
relationship OneToMany {
  ProductOrder{orderItem} to OrderItem{order(code) required},
  ProductCategory{product} to Product{productCategory(name)},
  Customer{order} to ProductOrder{customer(email) required},
  Invoice{shipment} to Shipment{invoice(code) required}
}
relationship ManyToOne {
  OrderItem{product(name) required} to Product
}

/* Entities for notification microservice */

entity Notification {
    date Instant required
    details String
    sentDate Instant required
    format NotificationType required
    userId Long required
    productId Long required
}

enum NotificationType {
    EMAIL, SMS, PARCEL
}

microservice Notification with notification


/* General options */

service * with serviceClass
paginate Product, Customer, ProductOrder, Invoice, Shipment, OrderItem with pagination
